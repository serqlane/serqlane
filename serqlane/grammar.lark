start: statement*


decorator: "@" identifier


// TODO: Paths
import_stmt: "import" identifier
import_list: identifier ("," identifier)*
import_from_stmt: "from" identifier "import" "[" [import_list] "]"
import_all_from_stmt: "from" identifier "import" "*"
?import_statements: import_stmt | import_from_stmt | import_all_from_stmt


// TODO: generics for both types and functions
struct_definition: [decorator] [pub_marker] "struct" identifier "{" [struct_field (_TERMINATOR struct_field)*] "}"
struct_field: [pub_marker] identifier user_type // TODO: default values

// rust terminology, wrong
enum_definition: "enum" identifier "{" [enum_field ((_TERMINATOR | ",") enum_field)*] "}"
enum_field: identifier ["(" enum_adt_inner ("," enum_adt_inner)* ")"] ["=" integer]
enum_adt_inner: [identifier ":"] _type

alias_definition: "alias" identifier "=" _type
distinct_definition: "distinct" identifier "=" _type


pub_marker: "pub"


fn_definition: [pub_marker] "fn" identifier fn_definition_args [return_user_type] block_stmt
fn_definition_args: "(" [fn_definition_arg ("," fn_definition_arg)*] ")"
fn_definition_arg: identifier user_type

fn_call_expr: expression fn_call_args
fn_call_args: "(" [expression ("," expression)*] ")"


statement: ((return_stmt | break_stmt | continue_stmt | expression | assignment | let_stmt | import_statements) _TERMINATOR) | (struct_definition | enum_definition | alias_definition | distinct_definition | fn_definition | block_stmt | while_stmt | if_stmt)

// For now just identifier. Later should be a generic[T] expression that handles function types and others as well
_type: identifier // TODO: Make it visible; get rid of _ for that

user_type: ":" _type
return_user_type: "->" _type

const_stmt: "const" identifier [user_type] = expression
let_stmt: "let" MUT? identifier user_type? "=" expression
MUT: "mut"
assignment: expression "=" expression

return_stmt: "return" [expression]
break_stmt: "break"
continue_stmt: "continue"

block_stmt: _block
block_expression: _block
_block: "{" statement* "}" // TODO: There is no such thing as a block expression right now

while_stmt: "while" expression block_stmt
if_stmt: "if" expression block_stmt ["else" block_stmt]

expression: literal | identifier | binary_expression | unary_expression | grouped_expression | fn_call_expr | block_expression
grouped_expression: "(" expression ")"


// TODO: Merge everything like this to handle precedence accurately

// lowest precedence
binary_expression: \
expression or expression
| expression and expression

| expression equals expression
| expression not_equals expression

| expression less expression
| expression lesseq expression
| expression greater expression
| expression greatereq expression

| expression plus expression
| expression minus expression

| expression modulus expression
| expression star expression
| expression slash expression

| expression dot identifier
// highest precedence


dot: "."
star: "*"
slash: "/"
minus: "-"
plus: "+"
modulus: "%"
and: "and"
or: "or"

equals: "=="
not_equals: "!="
less: "<"
lesseq: "<="
greater: ">"
greatereq: ">="


unary_expression: unary_operator? expression
?unary_operator: minus | plus | not | ampersand | star
not: "not"
ampersand: "&"

identifier: /[a-zA-Z](\w|\d)*/

?literal: bool | number | string
!bool: "true" | "false"
?number: integer | decimal
integer: /\d+/
decimal: /\d+\.\d+/
string: "\"" string_inner? "\""
?string_inner: /((\\\"|[^\"])+)/
// TODO: char

_TERMINATOR: /\n/

COMMENT: /\s*/ "//" /[^\n]/*
%ignore COMMENT

%ignore /\n/

%import common.WS_INLINE
%ignore WS_INLINE
