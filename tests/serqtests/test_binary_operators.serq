from std/debug import *
from std/macros import *


// literal arith
assert(1 + 1 == 2)
assert(1 - 1 == 0)
assert(1 * 2 == 2)
assert(1 / 1 == 1)
assert(1 + 1 + 1 == 3)
assert(10 / (3 + 2) == 2)
assert((10 / (3 + 2)) == 2)
assert(10 % 3 == 1)


// variable arith
{
    let x = 1
    let y = x + 2
    assert(y == 3)
}
{
    let x = 1
    let y = x + x
    assert(y == 2)
}


// failing type inference
{
    let x = "abc"
    assert_not(compiles("let y = x + 1"))
}
{
    let x: int32 = 10
    let y: int64 = 20
    assert_not(compiles("let y: int64 = (x + x) - y"))
}
{
    assert_not(compiles("let x = 1 == true"))
}


// passing type inference
{
    let x = 100
    let y = true
    let z = x > 0 and (x == 100) or false
    assert(z == true)
}